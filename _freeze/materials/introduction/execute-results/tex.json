{
  "hash": "368f88dba90af1aeea28a7edad2149a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day-0,1: Data Preperation and Introduction to ggplot2\"\ndescription: \"Data transformation and introduction to `ggplot2`\"\nauthor:\n  - name: \"Arvind Iyer\"\n    id: AI\n    orcid: 0000-0002-8247-700X\n    email: ayalurarvind@gmail.com\n    degrees: PhD\ndate: \"10/15/2024\"\nformat: \n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: right-body\n    code-fold: False\n    page-layout: full\n  pdf:\n    toc: true\n---\n\n\n\n\n\n\n# Data Preparation\n\nBefore visualizing data in R, you need to import it from an external source and format it properly. Ideally, data would come in a clean, error-free, rectangular format with no missing values, but that's rarely the case. In reality, data often requires cleaning and transformation to be useful for analysis. This process might involve handling missing data, correcting errors, restructuring columns, or converting data types. Proper preparation is key to ensuring that your visualizations accurately reflect the underlying patterns and insights in your data. A very import part of the data science life cycle.\n\n## Importing data into R\n\nR can import data from almost any source, including text files, excel spreadsheets etc. How do we do it? It is simple:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the library\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.1\nv ggplot2   3.5.1     v tibble    3.2.1\nv lubridate 1.9.3     v tidyr     1.3.1\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nSalaries <- read_csv(file = 'data/Salaries.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 397 Columns: 6\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (3): rank, discipline, sex\ndbl (3): yrs.since.phd, yrs.service, salary\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nSalaries <- read_tsv(file = 'data/Salaries.txt')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 397 Columns: 6\n-- Column specification --------------------------------------------------------\nDelimiter: \"\\t\"\nchr (3): rank, discipline, sex\ndbl (3): yrs.since.phd, yrs.service, salary\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# To know more about these function (any function) to check arguments of these functions.\nhelp(\"read_csv\") # ?read_csv ?function would also show the help page.\n```\n:::\n\n\n\n\n\n\n## Cleaning data\n\nThe most time consuming part. For this we use `tidyR` and `dplyr` packages. There are other ways to do the same. We will use `Salaries` data set (information about professor's salaries) for doing these tasks:\n\n-   Use `select` function to select some variables (columns)\n-   Use `mutate` function to create a new variable.\n-   Use `count` function to count a variable\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First lets get a glimpse of the data\nglimpse(Salaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 397\nColumns: 6\n$ rank          <chr> \"Prof\", \"Prof\", \"AsstProf\", \"Prof\", \"Prof\", \"AssocProf\",~\n$ discipline    <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"~\n$ yrs.since.phd <dbl> 19, 20, 4, 45, 40, 6, 30, 45, 21, 18, 12, 7, 1, 2, 20, 1~\n$ yrs.service   <dbl> 18, 16, 3, 39, 41, 6, 23, 45, 20, 18, 8, 2, 1, 0, 18, 3,~\n$ sex           <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", ~\n$ salary        <dbl> 139750, 173200, 79750, 115000, 141500, 97000, 175000, 14~\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use select function to select rank and discipline columns\nsubset <- Salaries %>% select(rank,discipline)\nsubset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 397 x 2\n   rank      discipline\n   <chr>     <chr>     \n 1 Prof      B         \n 2 Prof      B         \n 3 AsstProf  B         \n 4 Prof      B         \n 5 Prof      B         \n 6 AssocProf B         \n 7 Prof      B         \n 8 Prof      B         \n 9 Prof      B         \n10 Prof      B         \n# i 387 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Use mutate to create a new column color using discipline where A:red and B:blue  \nsubset %>% mutate(color=ifelse(discipline=='A','red','blue'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 397 x 3\n   rank      discipline color\n   <chr>     <chr>      <chr>\n 1 Prof      B          blue \n 2 Prof      B          blue \n 3 AsstProf  B          blue \n 4 Prof      B          blue \n 5 Prof      B          blue \n 6 AssocProf B          blue \n 7 Prof      B          blue \n 8 Prof      B          blue \n 9 Prof      B          blue \n10 Prof      B          blue \n# i 387 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#Use count function to count ranks\nSalaries %>% count(rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  rank          n\n  <chr>     <int>\n1 AssocProf    64\n2 AsstProf     67\n3 Prof        266\n```\n\n\n:::\n:::\n\n\n\n\n\n\nMust read and try to go through Data Transformation section of this [book](https://r4ds.hadley.nz/data-transform#groups)\n\nDo a read of chapter-2 of this [book](https://rkabacoff.github.io/datavis/DataPrep.html#cleaning-data).\n\n# Data Visualization\n\n## Introduction\n\nR offers multiple systems for creating graphs, but one of the most powerful and flexible is `ggplot2`.\n\n### What is `ggplot2`?\n\n`ggplot2` is a data visualization package for R developed by Hadley Wickham that provides a structured approach for visualization. This package is built on the grammar of graphics, a structured approach to designing and constructing visualizations in a consistent and intuitive manner.\n\n![](/images/grammer.png){fig-align=\"center\" width=\"371\"}\n\nLets see these in action with the famous `iris` dataset. First let see a summary of the data.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n\n\n:::\n:::\n\n\n\n\n\n\n@fig-ggplot2-1 takes in data as the argument which will generate a empty plot.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris)\n```\n\n::: {.cell-output-display}\n![Passing data to ggplot2](introduction_files/figure-pdf/fig-ggplot2-1-1.pdf){#fig-ggplot2-1 fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n@fig-ggplot2-2 adds Aesthetics to the plot.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris,\n      aes(x=Sepal.Length, y=Sepal.Width, \n          color=Species))\n```\n\n::: {.cell-output-display}\n![Adding Aesthetics](introduction_files/figure-pdf/fig-ggplot2-2-1.pdf){#fig-ggplot2-2 fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n@fig-ggplot2-3 adds Geometries to the plot.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris,\n      aes(x=Sepal.Length, y=Sepal.Width, \n          color=Species))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Adding Geometries](introduction_files/figure-pdf/fig-ggplot2-3-1.pdf){#fig-ggplot2-3 fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n@fig-ggplot2-4 adds Scale to the plot.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris,\n      aes(x=Sepal.Length, y=Sepal.Width, \n          color=Species))+\n  geom_point()+\n  scale_color_brewer(palette = 'Dark2')\n```\n\n::: {.cell-output-display}\n![Adding Scales](introduction_files/figure-pdf/fig-ggplot2-4-1.pdf){#fig-ggplot2-4 fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n@fig-ggplot2-4 adding Stats,theme,facets to the plot.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris,\n      aes(x=Sepal.Length, y=Sepal.Width, \n          color=Species)) +\n    geom_point() +\n    scale_color_brewer(palette=\"Dark2\") +\n    stat_summary(fun.y=\"mean\", geom= \"line\") + \n    coord_flip() +\n    facet_wrap(~Species) +\n    theme_bw() + theme(legend.position=\"top\") +\n    annotate(\"text\", x=7.5, y=2.5, label=\"Pval\")\n```\n\n::: {.cell-output-display}\n![Adding Scales](introduction_files/figure-pdf/fig-ggplot2-5-1.pdf){#fig-ggplot2-5 fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\nLet's create a bar plot of variable `rank` in similar steps on `Salaries` data.\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = Salaries, mapping = aes(x=rank,fill = rank,colour = rank))+\n  geom_bar()+\n  scale_fill_brewer(palette=\"Dark2\")+\n  scale_color_brewer(palette=\"Dark2\")+\n  theme_bw() + \n  theme(legend.position=\"top\") \n```\n\n::: {.cell-output-display}\n![Creating Bar Plot](introduction_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-align='center' fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n# References and Additional Materials\n\nFor making this tutorial various online resources were used. Mentioning few over here:\n\n-   <https://ggplot2-book.org/>\n-   <https://socviz.co/index.html>\n-   <https://github.com/thomasp85/ggplot2_workshop>\n-   <https://rkabacoff.github.io/datavis/>\n-   <https://r4ds.hadley.nz/>\n-   <https://clauswilke.com/dataviz/>\n\n# Materials\n\n+-------------+--------------+----------------------------------------+-----------------------------------------+\n|             | Description  | Slides                                 | Script                                  |\n+=============+==============+========================================+=========================================+\n| 1           | Introduction | [Day_0](../materials/slides/day_0.pdf) | [Day_1](../materials/R_scripts/day_1.R) |\n|             |              |                                        |                                         |\n|             |              | [Day_1](../materials/slides/day_1.pdf) |                                         |\n+-------------+--------------+----------------------------------------+-----------------------------------------+\n",
    "supporting": [
      "introduction_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}